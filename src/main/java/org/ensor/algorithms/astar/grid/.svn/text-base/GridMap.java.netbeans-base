/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.bfc.util.pathfinding.grid;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import com.bfc.util.pathfinding.Path;
import com.bfc.util.pathfinding.AStar;

/**
 *
 * @author Jon
 */
public abstract class GridMap implements com.bfc.util.pathfinding.Map<GridMover,GridNode> {
    private HashMap<Integer, HashMap<Integer, GridNode>> mRows;
    private int mWidth;
    private int mHeight;

    public GridMap() {
        mRows = new HashMap<Integer, HashMap<Integer, GridNode>>();
        mWidth = 0;
        mHeight = 0;
    }
    public void addNode(GridNode n) {
        HashMap<Integer, GridNode> column = mRows.get(n.y);
        if (column == null) {
            column = new HashMap<Integer, GridNode>();
            mRows.put(n.y, column);
        }
        mWidth = n.x > mWidth ? n.x : mWidth;
        mHeight = n.y > mHeight ? n.y : mHeight;
        column.put(n.x, n);
    }
    public void removeNode(int x, int y) {
        HashMap<Integer, GridNode> column = mRows.get(y);
        if (column == null) return;
        column.remove(x);
        if (column.isEmpty()) {
            mRows.remove(y);
        }
    }
    public void addNode(int x, int y, int passableFlags) {
        GridNode n = getNode(x,y);
        if (n == null) {
            n = new GridNode();
        }
        n.x = x;
        n.y = y;
        n.passableFlags = passableFlags;
        addNode(n);
    }
    public int getWidth() {
        return mWidth+1;
    }
    public int getHeight() {
        return mHeight+1;
    }
    public GridNode getNode(int x, int y) {
        HashMap<Integer, GridNode> column = mRows.get(y);
        if (column == null) return null;
        GridNode n = column.get(x);
        return n;
    }
    public Path<GridNode> findPath(GridMover mover, GridNode startNode, GridNode endNode, int maxSearchDepth) {
        AStar<GridMover, GridNode> aStar = new AStar<GridMover, GridNode>();
        return aStar.findPath(mover, this, startNode, endNode, maxSearchDepth);
    }
    protected void addPassableNode(GridMover mover, ArrayList<GridNode> neighbors, int x, int y) {
        GridNode n = getNode(x, y);
        if (n == null) return;
        if (!mover.canPass(n)) return;
        neighbors.add(n);
    }
    public abstract Collection<GridNode> getNeighbors(GridMover mover, GridNode node);
    public boolean isValid(GridMover mover, GridNode node) {
        GridNode n = getNode(node.x, node.y);
        if (n == null) return false;
        return mover.canPass(n);
    }
    public double getCost(GridMover mover, GridNode startNode, GridNode endNode) {
        return java.lang.Math.abs(startNode.x-endNode.x) + java.lang.Math.abs(startNode.y - endNode.y);
    }
    public double getHeuristic(GridMover mover, GridNode startNode, GridNode endNode) {
        return java.lang.Math.abs(startNode.x-endNode.x) + java.lang.Math.abs(startNode.y - endNode.y);
    }
}
