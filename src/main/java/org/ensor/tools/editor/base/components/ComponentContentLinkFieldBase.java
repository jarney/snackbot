/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ComponentContentLinkFieldBase.java
 *
 * Created on Apr 24, 2011, 10:42:09 PM
 */
package org.ensor.tools.editor.base.components;

import org.ensor.tools.editor.base.ContentLink;
import org.ensor.tools.editor.base.GameEditorBase;
import java.awt.datatransfer.*;
import javax.swing.TransferHandler;
import javax.swing.JComponent;
/**
 *
 * @author Jon
 */
public class ComponentContentLinkFieldBase extends javax.swing.JPanel {
    /** Creates new form ContentLinkSuper */
    private ContentLink mContentLink;
    private String mContentType;
    private ComponentContentLinkFieldBaseEventHandler mHandler;
    public ComponentContentLinkFieldBase() {
        initComponents();
        
        mHandler = null;
        
        mLink.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                if (mContentLink == null) return;
                GameEditorBase ge = GameEditorBase.getInstance();
                ge.openContent(mContentLink);
            }
        });
        
        mLink.setTransferHandler(new TransferHandler() {
            @Override
            public boolean canImport(TransferHandler.TransferSupport info) {
                ContentLink contentLink = new ContentLink();
                try {
                    String s = (String)info.getTransferable().getTransferData(DataFlavor.stringFlavor);
                    if (!contentLink.deserialize(s)) {
                        return false;
                    }
                    if (!contentLink.getContentType().equals(mContentType)) return false;
                }
                catch (Exception ex) {
                    return false;
                }

                return true;
            }

            // Drop into correct location.
            @Override
            public boolean importData(TransferHandler.TransferSupport info) {
                Transferable t = info.getTransferable();
                try {
                    ContentLink contentLink = new ContentLink();
                    String s = (String)t.getTransferData(DataFlavor.stringFlavor);
                    if (contentLink.deserialize(s)) {
                        setLink(contentLink);
                        return true;
                    }
                }
                catch (Exception ex) {
                    return false;
                }
		return true;
            }
            @Override
            public int getSourceActions(JComponent c) {
                return 0;
            }
            @Override
            protected Transferable createTransferable(JComponent c) {
                return null;
            }
        });
    }
    
    public ContentLink getLink() {
        return mContentLink;
    }
    public void setLinkChangeHandler(ComponentContentLinkFieldBaseEventHandler aHandler) {
        mHandler = aHandler;
    }
    public void setLink(ContentLink contentLink) {
        mContentLink = contentLink;
        if (mContentLink == null) {
            mLink.setText("");
            super.setToolTipText("");
        }
        else {
            mLink.setText(mContentLink.toString());
            mLink.setToolTipText(mContentLink.toString());
        }
        mLink.setCaretPosition(0);
        if (mHandler != null) {
            mHandler.onLinkChanged(mContentLink);
        }
    }

    protected void setContentTypeString(String aContentType) {
        mContentType = aContentType;
    }
    protected String getContentTypeString() {
        //return mLinkField.getContentType();
        return "";
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mButtonClear = new javax.swing.JButton();
        mLink = new javax.swing.JTextField();

        mButtonClear.setText("Clear");
        mButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonClearActionPerformed(evt);
            }
        });

        mLink.setEditable(false);
        mLink.setPreferredSize(new java.awt.Dimension(80, 23));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(mLink, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mButtonClear)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(mLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(mButtonClear))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonClearActionPerformed
        setLink(null);
    }//GEN-LAST:event_mButtonClearActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton mButtonClear;
    private javax.swing.JTextField mLink;
    // End of variables declaration//GEN-END:variables

}
