/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ComponentItemOrderPicker2.java
 *
 * Created on Apr 25, 2011, 11:28:31 PM
 */
package org.ensor.tools.editor.base.components;

import javax.swing.DefaultListModel;
import java.util.List;

/**
 *
 * @author Jon
 */
public class ComponentItemOrderPicker extends javax.swing.JPanel {

    private DefaultListModel                        mReferenceListModel;
    private DefaultListModel                        mSelectedListModel;
    private ComponentItemOrderPickerEventHandler    mHandler;
    /** Creates new form ComponentItemOrderPicker2 */
    public ComponentItemOrderPicker() {
        initComponents();
        mReferenceListModel = new DefaultListModel();
        mReferenceList.setModel(mReferenceListModel);
        mSelectedListModel = new DefaultListModel();
        mPickedList.setModel(mSelectedListModel);
        mHandler = null;
    }

    public void setHandler(ComponentItemOrderPickerEventHandler aHandler) {
        mHandler = aHandler;
    }
    
    public void setReferenceList(List<Object> aReferenceList) {
        mReferenceListModel.clear();
        for (Object cl : aReferenceList) {
            mReferenceListModel.add(mReferenceListModel.size(), cl);
        }
        boolean changedList = false;
        // When the reference list changes, iterate the selected list
        // and remove any frames which do not appear on the reference list.
//        for (Object so : mSelectedListModel.toArray()) {
//            boolean found = false;
//            for (Object ro : aReferenceList) {
//                if (ro.equals(so)) found = true;
//            }
//            if (!found) {
//                mSelectedListModel.removeElement(so);
//                changedList = true;
//            }
//        }
//        if (mHandler != null) {
//            mHandler.onValueChanged();
//        }
    }
    public void setSelectedList(List<Object> aList) {
        mSelectedListModel.clear();
        // When adding items to the selected list, ensure that
        // they appear on the reference list before allowing them to
        // be added.
        for (Object cl : aList) {
//            boolean found = false;
//            for (Object ro : mReferenceListModel.toArray()) {
//                if (cl.equals(ro)) found = true;
//            }
//            if (found) {
                mSelectedListModel.add(mSelectedListModel.size(), cl);
//            }
        }
    }
    public Object[] getSelectedList() {
        return mSelectedListModel.toArray();
    }
    public Object[] getReferenceList() {
        return mReferenceListModel.toArray();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mReferenceList = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        mButtonAllIn = new javax.swing.JButton();
        mButtonSelectedIn = new javax.swing.JButton();
        mButtonSelectedOut = new javax.swing.JButton();
        mButtonAllOut = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mPickedList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        mButtonUp = new javax.swing.JButton();
        mButtonDown = new javax.swing.JButton();

        setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        mReferenceList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        mReferenceList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mReferenceListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mReferenceList);

        jPanel1.add(jScrollPane1);

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.Y_AXIS));

        mButtonAllIn.setText(">>");
        mButtonAllIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonAllInActionPerformed(evt);
            }
        });
        jPanel4.add(mButtonAllIn);

        mButtonSelectedIn.setText(">");
        mButtonSelectedIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonSelectedInActionPerformed(evt);
            }
        });
        jPanel4.add(mButtonSelectedIn);

        mButtonSelectedOut.setText("<");
        mButtonSelectedOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonSelectedOutActionPerformed(evt);
            }
        });
        jPanel4.add(mButtonSelectedOut);

        mButtonAllOut.setText("<<");
        mButtonAllOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonAllOutActionPerformed(evt);
            }
        });
        jPanel4.add(mButtonAllOut);

        jPanel1.add(jPanel4);

        add(jPanel1);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        mPickedList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        mPickedList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mPickedListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(mPickedList);

        jPanel3.add(jScrollPane2);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        mButtonUp.setText("Up");
        mButtonUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonUpActionPerformed(evt);
            }
        });
        jPanel2.add(mButtonUp);

        mButtonDown.setText("Down");
        mButtonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonDownActionPerformed(evt);
            }
        });
        jPanel2.add(mButtonDown);

        jPanel3.add(jPanel2);

        add(jPanel3);
    }// </editor-fold>//GEN-END:initComponents

    private void mButtonAllInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonAllInActionPerformed
        for (Object aObject : mReferenceListModel.toArray()) {
            mSelectedListModel.add(mSelectedListModel.size(), aObject);
            if (mHandler != null) mHandler.onValueChanged();
        }
    }//GEN-LAST:event_mButtonAllInActionPerformed

    private void mButtonSelectedOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonSelectedOutActionPerformed
        int[] indices = mPickedList.getSelectedIndices();
        while (indices.length != 0) {
            mSelectedListModel.remove(indices[0]);
            indices = mPickedList.getSelectedIndices();
        }
        if (mHandler != null) mHandler.onValueChanged();
    }//GEN-LAST:event_mButtonSelectedOutActionPerformed

    private void mReferenceListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mReferenceListMouseClicked
        if (evt.getClickCount() == 2) {
            int[] indices = mReferenceList.getSelectedIndices();
            for (int ind : indices) {
                Object obj = mReferenceListModel.getElementAt(ind);
                mSelectedListModel.add(mSelectedListModel.size(), obj);
            }
            if (mHandler != null) mHandler.onValueChanged();
        }
    }//GEN-LAST:event_mReferenceListMouseClicked

    private void mPickedListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mPickedListMouseClicked
        if (evt.getClickCount() == 2) {
            int ind = mPickedList.getSelectedIndex();
            if (ind == -1) return;
            mSelectedListModel.removeElementAt(ind);
            if (mHandler != null) mHandler.onValueChanged();
        }
    }//GEN-LAST:event_mPickedListMouseClicked

    private void mButtonSelectedInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonSelectedInActionPerformed
        int[] indices = mReferenceList.getSelectedIndices();
        for (int ind : indices) {
            Object obj = mReferenceListModel.getElementAt(ind);
            mSelectedListModel.add(mSelectedListModel.size(), obj);
            if (mHandler != null) mHandler.onValueChanged();
        }
    }//GEN-LAST:event_mButtonSelectedInActionPerformed

    private void mButtonAllOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonAllOutActionPerformed
        mSelectedListModel.clear();
        if (mHandler != null) mHandler.onValueChanged();
    }//GEN-LAST:event_mButtonAllOutActionPerformed

    private void mButtonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonUpActionPerformed
        int index = mPickedList.getSelectedIndex();
        if (index == -1) return;
        if (index < 1) return;
        Object m0 = mSelectedListModel.getElementAt(index);
        Object m1 = mSelectedListModel.getElementAt(index-1);
        mSelectedListModel.set(index, m1);
        mSelectedListModel.set(index-1, m0);
        mPickedList.setSelectedIndex(index-1);
        if (mHandler != null) mHandler.onValueChanged();
    }//GEN-LAST:event_mButtonUpActionPerformed

    private void mButtonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonDownActionPerformed
        int index = mPickedList.getSelectedIndex();
        if (index == -1) return;
        if (index > mSelectedListModel.getSize()-2) return;
        Object m0 = mSelectedListModel.getElementAt(index);
        Object m1 = mSelectedListModel.getElementAt(index+1);
        mSelectedListModel.set(index, m1);
        mSelectedListModel.set(index+1, m0);
        mPickedList.setSelectedIndex(index+1);
        if (mHandler != null) mHandler.onValueChanged();

    }//GEN-LAST:event_mButtonDownActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mButtonAllIn;
    private javax.swing.JButton mButtonAllOut;
    private javax.swing.JButton mButtonDown;
    private javax.swing.JButton mButtonSelectedIn;
    private javax.swing.JButton mButtonSelectedOut;
    private javax.swing.JButton mButtonUp;
    private javax.swing.JList mPickedList;
    private javax.swing.JList mReferenceList;
    // End of variables declaration//GEN-END:variables
}
