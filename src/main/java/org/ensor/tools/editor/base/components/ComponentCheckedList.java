/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ComponentCheckedList.java
 *
 * Created on May 16, 2011, 2:28:15 PM
 */
package org.ensor.tools.editor.base.components;

import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;
import javax.swing.ListSelectionModel;
import javax.swing.DefaultListModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.awt.Rectangle;
import java.awt.Component;
/**
 *
 * @author Jon
 */
public class ComponentCheckedList extends javax.swing.JPanel {
    private DefaultListModel            mModel;
    private ComponentCheckedListEventHandler    mHandler;
    /** Creates new form ComponentCheckedList */
    public ComponentCheckedList() {
        mHandler = null;
        
        initComponents();
        mList.setCellRenderer(new CheckedListRenderer());
        mList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        mList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int index = mList.locationToIndex(e.getPoint());
                CheckableItem item = (CheckableItem) mList.getModel()
                    .getElementAt(index);
                item.setSelected(!item.isSelected());
                if (mHandler != null) {
                    mHandler.onItemChanged(item);
                }
                Rectangle rect = mList.getCellBounds(index, index);
                mList.repaint(rect);
            }
        });        
        
        mModel = new DefaultListModel();
        mList.setModel(mModel);
        mModel.clear();
        CheckableItem box1 = new CheckableItem("box1");
        mModel.add(mModel.getSize(), box1);
        CheckableItem box2 = new CheckableItem("box2");
        mModel.add(mModel.getSize(), box2);
        
    }

    public void clear() {
        mModel.clear();
    }
    public void add(Object aObject) {
        CheckableItem newItem = new CheckableItem(aObject);
        mModel.add(mModel.getSize(), newItem);
    }
    public void remove(Object aObject) {
        CheckableItem ci = new CheckableItem(aObject);
        mModel.removeElement(ci);
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        mList = new javax.swing.JList();

        mList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(mList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList mList;
    // End of variables declaration//GEN-END:variables

    public class CheckableItem {
        private Object mObject;

        private boolean isSelected;

        public CheckableItem(Object aObject) {
          mObject = aObject;
          isSelected = false;
        }

        public void setSelected(boolean b) {
          isSelected = b;
        }

        public boolean isSelected() {
          return isSelected;
        }

        @Override
        public String toString() {
          return mObject.toString();
        }
        @Override
        public boolean equals(Object other) {
            if (!(other instanceof CheckableItem))
                return false;
            CheckableItem oth = (CheckableItem)other;
            return oth.mObject.equals(mObject);
        }

        @Override
        public int hashCode() {
            return mObject.hashCode();
        }
    }

    class CheckedListRenderer extends JCheckBox implements ListCellRenderer {

        public CheckedListRenderer() {
          setBackground(UIManager.getColor("List.textBackground"));
          setForeground(UIManager.getColor("List.textForeground"));
        }
        @Override
        public Component getListCellRendererComponent(JList list, Object value,
            int index, boolean isSelected, boolean hasFocus) {
          setEnabled(list.isEnabled());
          setSelected(((ComponentCheckedList.CheckableItem) value).isSelected());
          setFont(list.getFont());
          setText(value.toString());
          return this;
        }
    }
}
