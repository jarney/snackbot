/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ComponentContentLinkList.java
 *
 * Created on Apr 25, 2011, 12:42:32 AM
 */
package org.ensor.tools.editor.base.components;
import java.awt.datatransfer.*;
import javax.swing.TransferHandler;
import javax.swing.JComponent;
import javax.swing.DefaultListModel;
import org.ensor.tools.editor.base.ContentLink;
import java.util.List;
import java.util.ArrayList;

/**
 *
 * @author Jon
 */
public class ComponentContentLinkOrderedListBase extends javax.swing.JPanel {
    private String mContentType;
    private DefaultListModel mModel; 
    private ComponentContentLinkOrderedListBaseEventHandler mHandler;
    protected void setContentTypeString(String aContentType) {
        mContentType = aContentType;
    }
    protected String getContentTypeString() {
        return mContentType;
    }

    public List<Object> getList() {
        ArrayList<Object> al = new ArrayList<Object>();
        int i;
        for (i = 0; i < mModel.size(); i++) {
            Object cl = (Object)mModel.get(i);
            al.add(cl);
        }
        return al;
    }
    public void addLink(Object aObject) {
        mModel.add(mModel.size(), aObject);
    }
    public void setList(List<?> aList) {
        mModel.clear();
        for (Object cl : aList) {
            mModel.add(mModel.size(), cl);
        }
    }
    public void setLinkHandler(ComponentContentLinkOrderedListBaseEventHandler aHandler) {
        mHandler = aHandler;
    }
    
    public void setSelectedLink(Object aLink) {
        mContentLinks.setSelectedValue(aLink, true);
    }
    
    
    /** Creates new form ComponentContentLinkList */
    public ComponentContentLinkOrderedListBase() {
        initComponents();
        
        mModel = new DefaultListModel();
        mContentLinks.setModel(mModel);
        
        mHandler = null;
        mContentLinks.setTransferHandler(new TransferHandler() {

            @Override
            public boolean canImport(TransferHandler.TransferSupport info) {
                ContentLink contentLink = new ContentLink();
                try {
                    String s = (String)info.getTransferable().getTransferData(DataFlavor.stringFlavor);
                    if (!contentLink.deserialize(s)) {
                        return false;
                    }
                    if (!contentLink.getContentType().equals(mContentType)) return false;
                }
                catch (Exception ex) {
                    return false;
                }

                return true;
            }

            // Drop into correct location.
            @Override
            public boolean importData(TransferHandler.TransferSupport info) {
                Transferable t = info.getTransferable();
                try {
                    ContentLink contentLink = new ContentLink();
                    String s = (String)t.getTransferData(DataFlavor.stringFlavor);
                    if (contentLink.deserialize(s)) {
                        Object contentLinkInstance;
                        if (mHandler != null) {
                            contentLinkInstance = mHandler.onLinkAdded(contentLink);
                        }
                        else {
                            contentLinkInstance = contentLink;
                        }
                        int index = mModel.indexOf(contentLinkInstance);
                        if (index == -1) {
                            mModel.add(mModel.getSize(), contentLinkInstance);
                        }
                        else {
                            mModel.set(index, contentLinkInstance);
                        }
                        return true;
                    }
                }
                catch (Exception ex) {
                    return false;
                }
		return true;
            }
            @Override
            public int getSourceActions(JComponent c) {
                return 0;
            }
            @Override
            protected Transferable createTransferable(JComponent c) {
                return null;
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        mContentLinks = new javax.swing.JList();
        mButtonRemoveSelected = new javax.swing.JButton();
        mButtonUp = new javax.swing.JButton();
        mButtonDown = new javax.swing.JButton();

        mContentLinks.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        mContentLinks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                onValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(mContentLinks);

        mButtonRemoveSelected.setText("Remove");
        mButtonRemoveSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonRemoveSelectedActionPerformed(evt);
            }
        });

        mButtonUp.setText("Up");
        mButtonUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonUpActionPerformed(evt);
            }
        });

        mButtonDown.setText("Down");
        mButtonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mButtonUp)
                    .addComponent(mButtonRemoveSelected)
                    .addComponent(mButtonDown)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mButtonRemoveSelected)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mButtonUp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mButtonDown)
                .addContainerGap(214, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public Object getSelectedLink() {
        int index = mContentLinks.getSelectedIndex();
        if (index == -1) return null;
        return (Object)mModel.getElementAt(index);
    }

    
    private void mButtonRemoveSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonRemoveSelectedActionPerformed
        int index = mContentLinks.getSelectedIndex();
        if (index == -1) return;
        if (index > mModel.getSize()-1) return;
        Object contentLink = mModel.getElementAt(index);
        mModel.remove(index);
        if (mHandler != null) {
            mHandler.onLinkRemoved(contentLink);
        }
    }//GEN-LAST:event_mButtonRemoveSelectedActionPerformed

    private void mButtonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonDownActionPerformed
        int index = mContentLinks.getSelectedIndex();
        if (index == -1) return;
        if (index > mModel.getSize()-2) return;
        Object m0 = mModel.getElementAt(index);
        Object m1 = mModel.getElementAt(index+1);
        mModel.set(index, m1);
        mModel.set(index+1, m0);
        mContentLinks.setSelectedIndex(index+1);
        if (mHandler != null) {
            mHandler.onListReordered();
        }

    }//GEN-LAST:event_mButtonDownActionPerformed

    private void mButtonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonUpActionPerformed
        int index = mContentLinks.getSelectedIndex();
        if (index == -1) return;
        if (index < 1) return;
        Object m0 = mModel.getElementAt(index);
        Object m1 = mModel.getElementAt(index-1);
        mModel.set(index, m1);
        mModel.set(index-1, m0);
        mContentLinks.setSelectedIndex(index-1);
        if (mHandler != null) {
            mHandler.onListReordered();
        }

    }//GEN-LAST:event_mButtonUpActionPerformed

    private void onValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_onValueChanged
        int index = 0;
        index = mContentLinks.getSelectedIndex();
        if (mHandler != null) {
            if (index == -1) {
                mHandler.onLinkSelected(null);
            }
            else {
                Object link = mModel.get(index);
                mHandler.onLinkSelected(link);
            }
        }
    }//GEN-LAST:event_onValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mButtonDown;
    private javax.swing.JButton mButtonRemoveSelected;
    private javax.swing.JButton mButtonUp;
    private javax.swing.JList mContentLinks;
    // End of variables declaration//GEN-END:variables

}
